# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ApproveCareerInput {
  careerId: ID!
  schoolId: ID!
}

type Auth {
  jwt: String!
  user: User!
}

type Calendar {
  _id: ID!
  calendarEventsConnection(after: String, before: String, first: Float = 0): PaginatedCalendarEvents
  followerCounter: Int!
  name: String!
  subject: Subject!
  usersFollowerConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type CalendarEdge {
  cursor: String!
  node: Calendar!
}

type CalendarEvent {
  _id: ID!
  calendar: Calendar!
  description: String
  durationHours: Float!
  endDateUtc: DateTime!
  eventsConnection(after: String, before: String, first: Float = 0): PaginatedEvents
  exceptionsDatesUtc: [DateTime!]
  followerCounter: Int!
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime!
  tags: [String!]!
  title: String!
  usersSubscriberConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type CalendarEventEdge {
  cursor: String!
  node: CalendarEvent!
}

type Career {
  _id: ID!
  approvingSchool: School
  createdBy: User!
  name: String!
  subjectsConnection(after: String, before: String, first: Float = 0): PaginatedSubjects
}

type CareerEdge {
  cursor: String!
  node: Career!
}

input CreateCalendarEventInput {
  calendar: ID!
  description: String
  durationHours: Float
  exceptionsDatesUtc: [DateTime!]
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime!
  title: String!
}

input CreateCalendarInput {
  name: String!
  subject: ID!
}

input CreateCareerInput {
  name: String
}

input CreateCareerSubjectInput {
  careerId: ID!
  isMandatory: Boolean
  semester: Int
  subjectId: ID!
}

input CreateEventInput {
  calendarEvent: ID!
  content: String!
  usersJoining: [ID!]
}

input CreateInstituteInput {
  name: String!
  school: ID!
  shortName: String
}

input CreateSchoolInput {
  name: String!
  parentSchool: ID
  shortName: String
}

input CreateSubjectInput {
  institute: ID
  name: String!
  school: ID
}

input CreateUserInput {
  email: String
  fullName: String
  mobile: String
  password: String!
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  _id: ID!
  calendarEvent: CalendarEvent!
  content: String!
  followerCounter: Int!
  usersJoiningConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type EventEdge {
  cursor: String!
  node: Event!
}

type Following {
  _id: ID!

  """User that follows (current user, the *follower*)"""
  follower: User!

  """Resource to be followed (the *followee*)"""
  resource: Resource!
  resourceName: String!
}

type Institute {
  _id: ID!
  createdBy: User!
  followerCounter: Int!
  name: String!
  school: School
  shortName: String!
  subjectsConnection(after: String, before: String, first: Float = 0): PaginatedSubjects
  usersFollowerConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type InstituteEdge {
  cursor: String!
  node: Institute!
}

input ListCalendarEventsInRangeInput {
  rangeEnd: String!
  rangeStart: String!
}

input ListCareerInput {
  _id: ID
}

input ListInstituteInput {
  _id: ID
  name: String
}

input ListSchoolInput {
  _id: ID
  name: String
}

input ListUserInput {
  _id: ID
  fullName: String
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type Mutation {
  addSubjectToCareer(payload: CreateCareerSubjectInput!): Career!
  approveCareerBySchool(payload: ApproveCareerInput!): Career!
  createCalendar(payload: CreateCalendarInput!): Calendar!
  createCalendarEvent(payload: CreateCalendarEventInput!): CalendarEvent!
  createCareer(payload: CreateCareerInput!): Career!
  createEvent(payload: CreateEventInput!): Event!
  createInstitute(payload: CreateInstituteInput!): Institute!
  createSchool(payload: CreateSchoolInput!): School!
  createSubject(payload: CreateSubjectInput!): Subject!
  createUser(payload: CreateUserInput!): User!
  deleteCalendar(_id: ID!): Calendar
  deleteCalendarEvent(_id: ID!): CalendarEvent
  deleteCareer(_id: ID!): Career!
  deleteEvent(_id: ID!): Event
  deleteInstitute(_id: ID!): Institute!
  deleteSchool(_id: ID!): School!
  deleteSubject(_id: ID!): Subject!
  deleteUser(_id: ID!): User
  followCalendar(calendarId: ID!): Following!
  followInstitute(instituteId: ID!): Following!
  followSchool(schoolId: ID!): Following!
  followSubject(subjectId: ID!): Following!
  followUser(followeeId: ID!): Following!
  joinEvent(eventId: ID!): Following!
  loginUser(payload: LoginInput!): Auth!
  subscribeToCalendarEvent(calendarEventId: ID!): Following!
  unfollowResource(resourceId: ID!): Following!
  unfollowUser(followeeId: ID!): Following!
  updateCalendar(payload: UpdateCalendarInput!): Calendar
  updateCalendarEvent(payload: UpdateCalendarEventInput!): CalendarEvent
  updateCareer(payload: UpdateCareerInput!): Career!
  updateEvent(payload: UpdateEventInput!): Event
  updateInstitute(payload: UpdateInstituteInput!): Institute!
  updateSchool(payload: UpdateSchoolInput!): School!
  updateSubject(payload: UpdateSubjectInput!): Subject!
  updateUser(payload: UpdateUserInput!): User
  writePermisson(payload: WritePermissonsInput!): Permisson!
}

type PageInfoType {
  endCursor: String
  hasNextPage: Boolean!
}

type PaginatedCalendarEvents {
  edges: [CalendarEventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedCalendars {
  edges: [CalendarEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedCareers {
  edges: [CareerEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedEvents {
  edges: [EventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedInstitutes {
  edges: [InstituteEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedSchools {
  edges: [SchoolEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedSubjects {
  edges: [SubjectEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type PaginatedUsers {
  edges: [UserEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type Permisson {
  resourceId: ID!
  resourceName: String!
  role: String!
  subjectId: ID!
}

type Query {
  calendar(_id: ID!): Calendar!
  calendarEvent(_id: ID!): CalendarEvent!
  calendarEventsInRange(payload: ListCalendarEventsInRangeInput!): PaginatedCalendarEvents!
  career(_id: ID!): Career!
  event(_id: ID!): Event!
  institute(_id: ID!): Institute!
  listCareers(after: String, before: String, filters: ListCareerInput, first: Float = 0): PaginatedCareers!
  listInstitutes(after: String, before: String, filters: ListInstituteInput, first: Float = 0): PaginatedInstitutes!
  listSchools(after: String, before: String, filters: ListSchoolInput, first: Float = 0): PaginatedSchools!
  listUsers(after: String, before: String, filters: ListUserInput, first: Float = 0): PaginatedUsers!
  school(_id: ID!): School!
  subject(_id: ID!): Subject!
  user(_id: ID!): User!
  whoAmI: User!
}

union Resource = Calendar | CalendarEvent | Event | Institute | School | Subject | User

type School {
  _id: ID!
  childrenSchoolsConnection(after: String, before: String, first: Float = 0): PaginatedSchools
  createdBy: User!
  followerCounter: Int!
  institutesConnection(after: String, before: String, first: Float = 0): PaginatedInstitutes
  name: String!
  parentSchool: School
  shortName: String!
  subjectsConnection(after: String, before: String, first: Float = 0): PaginatedSubjects
  usersFollowerConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type SchoolEdge {
  cursor: String!
  node: School!
}

type Subject {
  _id: ID!
  calendarsConnection(after: String, before: String, first: Float = 0): PaginatedCalendars
  followerCounter: Int!
  institute: Institute!
  name: String!
  school: School!
  shortName: String!
  tags: [String!]!
  usersFollowerConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type SubjectEdge {
  cursor: String!
  node: Subject!
}

input UpdateCalendarEventInput {
  _id: ID!
  calendar: ID
  description: String
  durationHours: Float
  exceptionsDatesUtc: [DateTime!]
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime
  title: String
}

input UpdateCalendarInput {
  _id: ID!
  name: String
  subject: ID
}

input UpdateCareerInput {
  _id: ID!
}

input UpdateEventInput {
  _id: ID!
  calendarEvent: ID!
  content: String
  usersJoining: [ID!]
}

input UpdateInstituteInput {
  _id: ID!
  name: String
  shortName: String
}

input UpdateSchoolInput {
  _id: ID!
  name: String
  shortName: String
}

input UpdateSubjectInput {
  _id: ID!
  name: String
  school: ID!
}

input UpdateUserInput {
  _id: ID!
  email: String
  fullName: String
  mobile: String
  password: String!
  role: String
  username: String!
}

type User {
  _id: ID!
  calendarEventsSubscribedConnection(after: String, before: String, first: Float = 0): PaginatedUsers!
  calendarsEventsSubscribedConnection: PaginatedCalendarEvents
  calendarsFollowingConnection(after: String, before: String, first: Float = 0): PaginatedCalendars
  email: String
  eventsJoiningConnection(after: String, before: String, first: Float = 0): PaginatedEvents
  followerCounter: Int!
  followingCounter: Int!
  fullName: String
  institutesFollowingConnection(after: String, before: String, first: Float = 0): PaginatedInstitutes
  mobile: String
  schoolsFollowingConnection(after: String, before: String, first: Float = 0): PaginatedSchools
  subjectsFollowingConnection(after: String, before: String, first: Float = 0): PaginatedSubjects
  username: String!
  usersFollowerConnection(after: String, before: String, first: Float = 0): PaginatedUsers
  usersFollowingConnection(after: String, before: String, first: Float = 0): PaginatedUsers
}

type UserEdge {
  cursor: String!
  node: User!
}

input WritePermissonsInput {
  resourceId: ID!
  resourceName: String!
  role: String!
  subjectId: ID!
}
