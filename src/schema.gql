# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  jwt: String!
  user: User!
}

type CalendarEvent {
  _id: ID!
  basedOnCalendarEvent: ID
  description: String
  durationHours: Float!
  endDateUtc: DateTime!
  eventsConnection: ConnectedEvents
  exceptionsDatesUtc: [DateTime!]
  followerCounter: Int!
  isAllDay: Boolean
  presentialLocation: String
  rrule: String
  startDateUtc: DateTime!
  subject: Subject!
  tags: [String!]!
  title: String!
  usersSubscriberConnection: ConnectedUsers
  virtualLocation: VirtualLocation
}

type CalendarEventEdge {
  cursor: String!
  node: CalendarEvent!
}

type Career {
  _id: ID!
  approvingSchool: School
  createdBy: User!
  name: String!
  subjectsConnection: ConnectedSubjects
}

type CareerEdge {
  cursor: String!
  node: Career!
}

type Comment {
  content: String!
  createdBy: User!
}

type ConnectedCalendarEvents {
  edges: [CalendarEventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedDiscussions {
  edges: [DiscussionEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedEvents {
  edges: [EventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedInstitutes {
  edges: [InstituteEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedSchools {
  edges: [SchoolEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedSubjects {
  edges: [SubjectEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type ConnectedUsers {
  edges: [UserEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

input CreateSchoolInput {
  avatarImage: String
  name: String!
  parentSchool: ID
  shortName: String
}

input CreateUserInput {
  avatarImage: String
  email: String
  fullName: String
  mobile: String
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Discussion {
  _id: ID!
  comments: [Comment!]
  content: String!
  subject: Subject!
  title: String!
}

type DiscussionEdge {
  cursor: String!
  node: Discussion!
}

type Event {
  _id: ID!
  calendarEvent: CalendarEvent!
  comments: [Comment!]
  description: String
  followerCounter: Int!
  presentialLocation: String
  startDateUtc: DateTime!
  usersJoiningConnection: ConnectedUsers
  virtualLocation: VirtualLocation
}

type EventEdge {
  cursor: String!
  node: Event!
}

type Institute {
  _id: ID!
  avatarImage: String
  createdBy: User!
  followerCounter: Int!
  name: String!
  school: School
  shortName: String!
  subjectsConnection: ConnectedSubjects
  usersFollowerConnection: ConnectedUsers
}

type InstituteEdge {
  cursor: String!
  node: Institute!
}

input ListSchoolInput {
  _id: ID
  name: String
}

input ListUserInput {
  _id: ID
  fullName: String
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type Mutation {
  createSchool(payload: CreateSchoolInput!): School!
  createUser(payload: CreateUserInput!): User!
  deleteSchool(_id: ID!): School!
  deleteUser(_id: ID!): User
  loginUser(payload: LoginInput!): Auth!
  updateSchool(payload: UpdateSchoolInput!): School!
  updateUser(payload: UpdateUserInput!): User
}

type PageInfoType {
  endCursor: String
  hasNextPage: Boolean!
}

type Query {
  listSchools(after: String, before: String, filters: ListSchoolInput, first: Int = 0): ConnectedSchools!
  listUsers(after: String, before: String, filters: ListUserInput, first: Int = 0): ConnectedUsers!
  school(_id: ID!): School!
  user(_id: ID!): User!
  whoAmI: User!
}

type School {
  _id: ID!
  avatarImage: String
  childrenSchoolsConnection(after: String, before: String, first: Int = 0): ConnectedSchools
  createdBy: User!
  followerCounter: Int!
  institutesConnection(after: String, before: String, first: Int = 0): ConnectedInstitutes
  name: String!
  parentSchool: School
  shortName: String!
  subjectsConnection(after: String, before: String, first: Int = 0): ConnectedSubjects
  usersFollowerConnection(after: String, before: String, first: Int = 0): ConnectedUsers
}

type SchoolEdge {
  cursor: String!
  node: School!
}

type Subject {
  _id: ID!
  avatarImage: String
  calendarEventsConnection: ConnectedCalendarEvents
  description: String!
  discussionsConnection: ConnectedDiscussions
  followerCounter: Int!
  institute: Institute!
  name: String!
  school: School!
  shortName: String!
  tags: [String!]!
  usersFollowerConnection: ConnectedUsers
}

type SubjectEdge {
  cursor: String!
  node: Subject!
}

input UpdateSchoolInput {
  _id: ID!
  name: String
  shortName: String
}

input UpdateUserInput {
  _id: ID!
  avatarImage: String
  email: String
  fullName: String
  mobile: String
  password: String!
  username: String!
}

type User {
  _id: ID!
  avatarImage: String
  calendarEventsSubscribedConnection(after: String, before: String, first: Int = 0): ConnectedUsers!
  calendarsEventsSubscribedConnection: ConnectedCalendarEvents
  email: String
  eventsJoiningConnection(after: String, before: String, first: Int = 0): ConnectedEvents
  followerCounter: Int!
  followingCounter: Int!
  fullName: String
  institutesFollowingConnection(after: String, before: String, first: Int = 0): ConnectedInstitutes
  mobile: String
  schoolsFollowingConnection(after: String, before: String, first: Int = 0): ConnectedSchools
  subjectsFollowingConnection(after: String, before: String, first: Int = 0): ConnectedSubjects
  username: String!
  usersFollowerConnection(after: String, before: String, first: Int = 0): ConnectedUsers
  usersFollowingConnection(after: String, before: String, first: Int = 0): ConnectedUsers
}

type UserEdge {
  cursor: String!
  node: User!
}

type VirtualLocation {
  notes: String!
  serviceType: String!
  url: String!
}