# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfoType {
  endCursor: String
  hasNextPage: Boolean!
}

type Comment {
  content: String!
  createdBy: User!
}

type VirtualLocation {
  serviceType: String!
  url: String!
  notes: String!
}

type Event {
  _id: ID!
  description: String
  presentialLocation: String
  virtualLocation: VirtualLocation
  startDateUtc: DateTime!
  comments: [Comment!]
  followerCounter: Int!
  calendarEvent: CalendarEvent!
  usersJoiningConnection: ConnectedUsers
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventEdge {
  cursor: String!
  node: Event!
}

type ConnectedEvents {
  edges: [EventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type CalendarEvent {
  _id: ID!
  title: String!
  description: String
  presentialLocation: String
  virtualLocation: VirtualLocation
  tags: [String!]!
  startDateUtc: DateTime!
  endDateUtc: DateTime!
  isAllDay: Boolean
  durationHours: Float!
  rrule: String
  exceptionsDatesUtc: [DateTime!]
  followerCounter: Int!
  basedOnCalendarEvent: ID
  subject: Subject!
  eventsConnection: ConnectedEvents
  usersSubscriberConnection: ConnectedUsers
}

type CalendarEventEdge {
  cursor: String!
  node: CalendarEvent!
}

type ConnectedCalendarEvents {
  edges: [CalendarEventEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type Institute {
  _id: ID!
  name: String!
  shortName: String!
  createdBy: User!
  avatarImage: String
  followerCounter: Int!
  school: School
  subjectsConnection: ConnectedSubjects
  usersFollowerConnection: ConnectedUsers
}

type InstituteEdge {
  cursor: String!
  node: Institute!
}

type ConnectedInstitutes {
  edges: [InstituteEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type Discussion {
  _id: ID!
  title: String!
  content: String!
  comments: [Comment!]
  subject: Subject!
}

type DiscussionEdge {
  cursor: String!
  node: Discussion!
}

type ConnectedDiscussions {
  edges: [DiscussionEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type Subject {
  _id: ID!
  name: String!
  shortName: String!
  description: String!
  avatarImage: String
  tags: [String!]!
  followerCounter: Int!
  school: School!
  institute: Institute!
  calendarEventsConnection: ConnectedCalendarEvents
  discussionsConnection: ConnectedDiscussions
  usersFollowerConnection: ConnectedUsers
}

type SubjectEdge {
  cursor: String!
  node: Subject!
}

type ConnectedSubjects {
  edges: [SubjectEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type School {
  _id: ID!
  name: String!
  shortName: String!
  createdBy: User!
  avatarImage: String
  followerCounter: Int!
  parentSchool: School
  subjectsConnection: ConnectedSubjects
  institutesConnection: ConnectedInstitutes
  usersFollowerConnection: ConnectedUsers
  childrenSchoolsConnection: ConnectedSchools
}

type SchoolEdge {
  cursor: String!
  node: School!
}

type ConnectedSchools {
  edges: [SchoolEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type User {
  _id: ID!
  fullName: String
  username: String!
  email: String
  mobile: String
  avatarImage: String
  followerCounter: Int!
  followingCounter: Int!
  usersFollowerConnection(first: Float = 0, after: String, before: String): ConnectedUsers
  usersFollowingConnection(first: Float = 0, after: String, before: String): ConnectedUsers
  schoolsFollowingConnection(first: Float = 0, after: String, before: String): ConnectedSchools
  institutesFollowingConnection(first: Float = 0, after: String, before: String): ConnectedInstitutes
  subjectsFollowingConnection(first: Float = 0, after: String, before: String): ConnectedSubjects
  calendarsEventsSubscribedConnection: ConnectedCalendarEvents
  eventsJoiningConnection(first: Float = 0, after: String, before: String): ConnectedEvents
  calendarEventsSubscribedConnection(first: Float = 0, after: String, before: String): ConnectedUsers!
}

type UserEdge {
  cursor: String!
  node: User!
}

type ConnectedUsers {
  edges: [UserEdge!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type Auth {
  jwt: String!
  user: User!
}

type Career {
  _id: ID!
  name: String!
  createdBy: User!
  approvingSchool: School
  subjectsConnection: ConnectedSubjects
}

type CareerEdge {
  cursor: String!
  node: Career!
}

type Query {
  user(_id: ID!): User!
  listUsers(filters: ListUserInput, first: Float = 0, after: String, before: String): ConnectedUsers!
  whoAmI: User!
}

input ListUserInput {
  _id: ID
  fullName: String
}

type Mutation {
  createUser(payload: CreateUserInput!): User!
  updateUser(payload: UpdateUserInput!): User
  deleteUser(_id: ID!): User
  loginUser(payload: LoginInput!): Auth!
}

input CreateUserInput {
  fullName: String
  username: String!
  password: String!
  email: String
  mobile: String
  avatarImage: String
}

input UpdateUserInput {
  fullName: String
  username: String!
  password: String!
  email: String
  mobile: String
  avatarImage: String
  _id: ID!
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}