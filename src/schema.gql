# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  jwt: String!
  user: User!
}

type Calendar {
  _id: ID!
  calendarEvents(populate: Boolean!): [CalendarEvent!]!
  name: String!
  subject(populate: Boolean!): Subject!
}

type CalendarEvent {
  _id: ID!
  calendar(populate: Boolean!): Calendar!
  description: String
  durationHours: Float!
  endDateUtc: DateTime!
  exceptionsDatesUtc: [DateTime!]
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime!
  title: String!
}

input CreateCalendarEventInput {
  calendar: ID!
  description: String
  durationHours: Float
  exceptionsDatesUtc: [DateTime!]
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime!
  title: String!
}

input CreateCalendarInput {
  name: String!
  subject: ID!
}

input CreateEventInput {
  calendarEvent: ID!
  content: String!
  usersJoining: [ID!]
}

input CreateSchoolInput {
  name: String!
}

input CreateSubjectInput {
  name: String!
  school: ID!
}

input CreateUserInput {
  email: String
  fullName: String
  mobile: String
  password: String!
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  _id: ID!
  calendarEvent(populate: Boolean!): CalendarEvent!
  content: String!
  usersJoining(populate: Boolean!): [User!]
}

input ListCalendarEventInput {
  _id: ID
  calendar: ID
  title: String
}

input ListCalendarInput {
  _id: ID
  name: String
  subject: ID
}

input ListEventInput {
  _id: ID
  calendarEvent: ID!
  content: String!
  usersJoining: [ID!]
}

input ListSchoolInput {
  _id: ID
  name: String
}

input ListSubjectInput {
  _id: ID
  name: String
}

input ListUserInput {
  _id: ID
  fullName: String
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type Mutation {
  createCalendar(payload: CreateCalendarInput!): Calendar!
  createCalendarEvent(payload: CreateCalendarEventInput!): CalendarEvent!
  createEvent(payload: CreateEventInput!): Event!
  createSchool(payload: CreateSchoolInput!): School!
  createSubject(payload: CreateSubjectInput!): Subject!
  createUser(payload: CreateUserInput!): User!
  deleteCalendar(_id: ID!): Calendar
  deleteCalendarEvent(_id: ID!): CalendarEvent
  deleteEvent(_id: ID!): Event
  deleteSchool(_id: ID!): School!
  deleteSubject(_id: ID!): Subject!
  deleteUser(_id: ID!): User
  loginUser(payload: LoginInput!): Auth!
  updateCalendar(payload: UpdateCalendarInput!): Calendar
  updateCalendarEvent(payload: UpdateCalendarEventInput!): CalendarEvent
  updateEvent(payload: UpdateEventInput!): Event
  updateSchool(payload: UpdateSchoolInput!): School!
  updateSubject(payload: UpdateSubjectInput!): Subject!
  updateUser(payload: UpdateUserInput!): User
}

type Query {
  calendar(_id: ID!): Calendar!
  calendarEvent(_id: ID!): CalendarEvent!
  calendarEvents(filters: ListCalendarEventInput): [CalendarEvent!]!
  calendars(filters: ListCalendarInput): [Calendar!]!
  event(_id: ID!): Event!
  events(filters: ListEventInput): [Event!]!
  school(_id: ID!): School!
  schools(filters: ListSchoolInput): [School!]!
  subject(_id: ID!): Subject!
  subjects(filters: ListSubjectInput): [Subject!]!
  user(_id: ID!): User!
  users(filters: ListUserInput): [User!]!
  whoAmI: User!
}

type School {
  _id: ID!
  name: String!
  subjects(populate: Boolean!): [Subject!]!
}

type Subject {
  _id: ID!
  calendars(populate: Boolean!): [Calendar!]!
  name: String!
  school(populate: Boolean!): School!
}

input UpdateCalendarEventInput {
  _id: ID!
  calendar: ID
  description: String
  durationHours: Float
  exceptionsDatesUtc: [DateTime!]
  isAllDay: Boolean
  rrule: String
  startDateUtc: DateTime
  title: String
}

input UpdateCalendarInput {
  _id: ID!
  name: String
  subject: ID
}

input UpdateEventInput {
  _id: ID!
  calendarEvent: ID!
  content: String
  usersJoining: [ID!]
}

input UpdateSchoolInput {
  _id: ID!
  name: String
}

input UpdateSubjectInput {
  _id: ID!
  name: String
  school: ID!
}

input UpdateUserInput {
  _id: ID!
  email: String
  fullName: String
  mobile: String
  password: String!
  role: String
  username: String!
}

type User {
  _id: ID!
  email: String
  fullName: String
  mobile: String
  roles: [String!]
  username: String!
}
